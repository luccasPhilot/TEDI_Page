services:
  backend:
    image: node-backend-tedi:v1
    container_name: node-backend-tedi
    networks:
      - tedi-network
    build:
      context: ../Backend
      dockerfile: ./Dockerfile
    ports:
      - "3333:3333"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3333/"]
      interval: 10s
      timeout: 5s
      retries: 3
    secrets:
      - PORT
      - SECRET
      - TOKEN_EXPIRATION
      - FRONTEND_URL
      - EMAIL_USER
      - EMAIL_PASS
      - DB_NAME
      - DB_USER
      - DB_PASS
      - DB_HOST
      - DB_PORT
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:16
    container_name: postgres_db
    networks:
      - tedi-network
    restart: always
    ports:
      - "5000:5432"
    environment:
      POSTGRES_DB_FILE: /run/secrets/DB_NAME
      POSTGRES_USER_FILE: /run/secrets/DB_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/DB_PASS
    secrets:
      - DB_NAME
      - DB_USER
      - DB_PASS
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./postgresql/02_load_data.sql:/docker-entrypoint-initdb.d/02_load_data.sql

  frontend:
    image: angular-frontend-tedi:v1
    container_name: angular-frontend-tedi
    networks:
      - tedi-network
    build:
      context: ../Frontend
      dockerfile: Dockerfile
      args:
        - ENV=development
    environment:
      - NODE_ENV=development
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

networks:
  tedi-network:
    driver: bridge

volumes:
  postgres_data:
    name: tedi_backend_volume

secrets:
  PORT:
    file: .secrets/PORT
  SECRET:
    file: .secrets/SECRET
  TOKEN_EXPIRATION:
    file: .secrets/TOKEN_EXPIRATION
  FRONTEND_URL:
    file: .secrets/FRONTEND_URL
  EMAIL_USER:
    file: .secrets/EMAIL_USER
  EMAIL_PASS:
    file: .secrets/EMAIL_PASS
  DB_NAME:
    file: .secrets/DB_NAME
  DB_USER:
    file: .secrets/DB_USER
  DB_PASS:
    file: .secrets/DB_PASS
  DB_HOST:
    file: .secrets/DB_HOST
  DB_PORT:
    file: .secrets/DB_PORT
